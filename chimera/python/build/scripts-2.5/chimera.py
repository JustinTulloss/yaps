# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _chimera
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class ChimeraGlobal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChimeraGlobal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChimeraGlobal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["me"] = _chimera.ChimeraGlobal_me_set
    __swig_getmethods__["me"] = _chimera.ChimeraGlobal_me_get
    if _newclass:me = _swig_property(_chimera.ChimeraGlobal_me_get, _chimera.ChimeraGlobal_me_set)
    __swig_setmethods__["bootstrap"] = _chimera.ChimeraGlobal_bootstrap_set
    __swig_getmethods__["bootstrap"] = _chimera.ChimeraGlobal_bootstrap_get
    if _newclass:bootstrap = _swig_property(_chimera.ChimeraGlobal_bootstrap_get, _chimera.ChimeraGlobal_bootstrap_set)
    __swig_setmethods__["join"] = _chimera.ChimeraGlobal_join_set
    __swig_getmethods__["join"] = _chimera.ChimeraGlobal_join_get
    if _newclass:join = _swig_property(_chimera.ChimeraGlobal_join_get, _chimera.ChimeraGlobal_join_set)
    __swig_setmethods__["lock"] = _chimera.ChimeraGlobal_lock_set
    __swig_getmethods__["lock"] = _chimera.ChimeraGlobal_lock_get
    if _newclass:lock = _swig_property(_chimera.ChimeraGlobal_lock_get, _chimera.ChimeraGlobal_lock_set)
    __swig_setmethods__["forward"] = _chimera.ChimeraGlobal_forward_set
    __swig_getmethods__["forward"] = _chimera.ChimeraGlobal_forward_get
    if _newclass:forward = _swig_property(_chimera.ChimeraGlobal_forward_get, _chimera.ChimeraGlobal_forward_set)
    __swig_setmethods__["deliver"] = _chimera.ChimeraGlobal_deliver_set
    __swig_getmethods__["deliver"] = _chimera.ChimeraGlobal_deliver_get
    if _newclass:deliver = _swig_property(_chimera.ChimeraGlobal_deliver_get, _chimera.ChimeraGlobal_deliver_set)
    __swig_setmethods__["update"] = _chimera.ChimeraGlobal_update_set
    __swig_getmethods__["update"] = _chimera.ChimeraGlobal_update_get
    if _newclass:update = _swig_property(_chimera.ChimeraGlobal_update_get, _chimera.ChimeraGlobal_update_set)
    __swig_setmethods__["globalSeqNum"] = _chimera.ChimeraGlobal_globalSeqNum_set
    __swig_getmethods__["globalSeqNum"] = _chimera.ChimeraGlobal_globalSeqNum_get
    if _newclass:globalSeqNum = _swig_property(_chimera.ChimeraGlobal_globalSeqNum_get, _chimera.ChimeraGlobal_globalSeqNum_set)
    def __init__(self, *args): 
        this = _chimera.new_ChimeraGlobal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_ChimeraGlobal
    __del__ = lambda self : None;
ChimeraGlobal_swigregister = _chimera.ChimeraGlobal_swigregister
ChimeraGlobal_swigregister(ChimeraGlobal)

chimera_init = _chimera.chimera_init
chimera_join = _chimera.chimera_join
chimera_route = _chimera.chimera_route
chimera_forward = _chimera.chimera_forward
chimera_deliver = _chimera.chimera_deliver
chimera_update = _chimera.chimera_update
chimera_setkey = _chimera.chimera_setkey
chimera_register = _chimera.chimera_register
chimera_send = _chimera.chimera_send
chimera_ping = _chimera.chimera_ping


