# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _chimera
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


SWIG_UnknownError = _chimera.SWIG_UnknownError
SWIG_IOError = _chimera.SWIG_IOError
SWIG_RuntimeError = _chimera.SWIG_RuntimeError
SWIG_IndexError = _chimera.SWIG_IndexError
SWIG_TypeError = _chimera.SWIG_TypeError
SWIG_DivisionByZero = _chimera.SWIG_DivisionByZero
SWIG_OverflowError = _chimera.SWIG_OverflowError
SWIG_SyntaxError = _chimera.SWIG_SyntaxError
SWIG_ValueError = _chimera.SWIG_ValueError
SWIG_SystemError = _chimera.SWIG_SystemError
SWIG_AttributeError = _chimera.SWIG_AttributeError
SWIG_MemoryError = _chimera.SWIG_MemoryError
SWIG_NullReferenceError = _chimera.SWIG_NullReferenceError
SWIG_RUNTIME_VERSION = _chimera.SWIG_RUNTIME_VERSION
SWIG_BUFFER_SIZE = _chimera.SWIG_BUFFER_SIZE
SWIG_POINTER_DISOWN = _chimera.SWIG_POINTER_DISOWN
SWIG_POINTER_OWN = _chimera.SWIG_POINTER_OWN
SWIG_OK = _chimera.SWIG_OK
SWIG_ERROR = _chimera.SWIG_ERROR
SWIG_CASTRANKLIMIT = _chimera.SWIG_CASTRANKLIMIT
SWIG_NEWOBJMASK = _chimera.SWIG_NEWOBJMASK
SWIG_TMPOBJMASK = _chimera.SWIG_TMPOBJMASK
SWIG_BADOBJ = _chimera.SWIG_BADOBJ
SWIG_OLDOBJ = _chimera.SWIG_OLDOBJ
SWIG_NEWOBJ = _chimera.SWIG_NEWOBJ
SWIG_TMPOBJ = _chimera.SWIG_TMPOBJ
class swig_type_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_type_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_type_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _chimera.swig_type_info_name_set
    __swig_getmethods__["name"] = _chimera.swig_type_info_name_get
    if _newclass:name = _swig_property(_chimera.swig_type_info_name_get, _chimera.swig_type_info_name_set)
    __swig_setmethods__["str"] = _chimera.swig_type_info_str_set
    __swig_getmethods__["str"] = _chimera.swig_type_info_str_get
    if _newclass:str = _swig_property(_chimera.swig_type_info_str_get, _chimera.swig_type_info_str_set)
    __swig_setmethods__["dcast"] = _chimera.swig_type_info_dcast_set
    __swig_getmethods__["dcast"] = _chimera.swig_type_info_dcast_get
    if _newclass:dcast = _swig_property(_chimera.swig_type_info_dcast_get, _chimera.swig_type_info_dcast_set)
    __swig_setmethods__["cast"] = _chimera.swig_type_info_cast_set
    __swig_getmethods__["cast"] = _chimera.swig_type_info_cast_get
    if _newclass:cast = _swig_property(_chimera.swig_type_info_cast_get, _chimera.swig_type_info_cast_set)
    __swig_setmethods__["clientdata"] = _chimera.swig_type_info_clientdata_set
    __swig_getmethods__["clientdata"] = _chimera.swig_type_info_clientdata_get
    if _newclass:clientdata = _swig_property(_chimera.swig_type_info_clientdata_get, _chimera.swig_type_info_clientdata_set)
    __swig_setmethods__["owndata"] = _chimera.swig_type_info_owndata_set
    __swig_getmethods__["owndata"] = _chimera.swig_type_info_owndata_get
    if _newclass:owndata = _swig_property(_chimera.swig_type_info_owndata_get, _chimera.swig_type_info_owndata_set)
    def __init__(self, *args): 
        this = _chimera.new_swig_type_info(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_swig_type_info
    __del__ = lambda self : None;
swig_type_info_swigregister = _chimera.swig_type_info_swigregister
swig_type_info_swigregister(swig_type_info)

class swig_cast_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_cast_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_cast_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _chimera.swig_cast_info_type_set
    __swig_getmethods__["type"] = _chimera.swig_cast_info_type_get
    if _newclass:type = _swig_property(_chimera.swig_cast_info_type_get, _chimera.swig_cast_info_type_set)
    __swig_setmethods__["converter"] = _chimera.swig_cast_info_converter_set
    __swig_getmethods__["converter"] = _chimera.swig_cast_info_converter_get
    if _newclass:converter = _swig_property(_chimera.swig_cast_info_converter_get, _chimera.swig_cast_info_converter_set)
    __swig_setmethods__["next"] = _chimera.swig_cast_info_next_set
    __swig_getmethods__["next"] = _chimera.swig_cast_info_next_get
    if _newclass:next = _swig_property(_chimera.swig_cast_info_next_get, _chimera.swig_cast_info_next_set)
    __swig_setmethods__["prev"] = _chimera.swig_cast_info_prev_set
    __swig_getmethods__["prev"] = _chimera.swig_cast_info_prev_get
    if _newclass:prev = _swig_property(_chimera.swig_cast_info_prev_get, _chimera.swig_cast_info_prev_set)
    def __init__(self, *args): 
        this = _chimera.new_swig_cast_info(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_swig_cast_info
    __del__ = lambda self : None;
swig_cast_info_swigregister = _chimera.swig_cast_info_swigregister
swig_cast_info_swigregister(swig_cast_info)

class swig_module_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_module_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_module_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["types"] = _chimera.swig_module_info_types_set
    __swig_getmethods__["types"] = _chimera.swig_module_info_types_get
    if _newclass:types = _swig_property(_chimera.swig_module_info_types_get, _chimera.swig_module_info_types_set)
    __swig_setmethods__["size"] = _chimera.swig_module_info_size_set
    __swig_getmethods__["size"] = _chimera.swig_module_info_size_get
    if _newclass:size = _swig_property(_chimera.swig_module_info_size_get, _chimera.swig_module_info_size_set)
    __swig_setmethods__["next"] = _chimera.swig_module_info_next_set
    __swig_getmethods__["next"] = _chimera.swig_module_info_next_get
    if _newclass:next = _swig_property(_chimera.swig_module_info_next_get, _chimera.swig_module_info_next_set)
    __swig_setmethods__["type_initial"] = _chimera.swig_module_info_type_initial_set
    __swig_getmethods__["type_initial"] = _chimera.swig_module_info_type_initial_get
    if _newclass:type_initial = _swig_property(_chimera.swig_module_info_type_initial_get, _chimera.swig_module_info_type_initial_set)
    __swig_setmethods__["cast_initial"] = _chimera.swig_module_info_cast_initial_set
    __swig_getmethods__["cast_initial"] = _chimera.swig_module_info_cast_initial_get
    if _newclass:cast_initial = _swig_property(_chimera.swig_module_info_cast_initial_get, _chimera.swig_module_info_cast_initial_set)
    __swig_setmethods__["clientdata"] = _chimera.swig_module_info_clientdata_set
    __swig_getmethods__["clientdata"] = _chimera.swig_module_info_clientdata_get
    if _newclass:clientdata = _swig_property(_chimera.swig_module_info_clientdata_get, _chimera.swig_module_info_clientdata_set)
    def __init__(self, *args): 
        this = _chimera.new_swig_module_info(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_swig_module_info
    __del__ = lambda self : None;
swig_module_info_swigregister = _chimera.swig_module_info_swigregister
swig_module_info_swigregister(swig_module_info)

SWIG_TypeNameComp = _chimera.SWIG_TypeNameComp
SWIG_TypeEquiv = _chimera.SWIG_TypeEquiv
SWIG_TypeCompare = _chimera.SWIG_TypeCompare
SWIG_TypeCheck = _chimera.SWIG_TypeCheck
SWIG_TypeCheckStruct = _chimera.SWIG_TypeCheckStruct
SWIG_TypeCast = _chimera.SWIG_TypeCast
SWIG_TypeDynamicCast = _chimera.SWIG_TypeDynamicCast
SWIG_TypeName = _chimera.SWIG_TypeName
SWIG_TypePrettyName = _chimera.SWIG_TypePrettyName
SWIG_TypeClientData = _chimera.SWIG_TypeClientData
SWIG_TypeNewClientData = _chimera.SWIG_TypeNewClientData
SWIG_MangledTypeQueryModule = _chimera.SWIG_MangledTypeQueryModule
SWIG_TypeQueryModule = _chimera.SWIG_TypeQueryModule
SWIG_PackData = _chimera.SWIG_PackData
SWIG_UnpackData = _chimera.SWIG_UnpackData
SWIG_PackVoidPtr = _chimera.SWIG_PackVoidPtr
SWIG_UnpackVoidPtr = _chimera.SWIG_UnpackVoidPtr
SWIG_PackDataName = _chimera.SWIG_PackDataName
SWIG_UnpackDataName = _chimera.SWIG_UnpackDataName
SWIG_PYBUFFER_SIZE = _chimera.SWIG_PYBUFFER_SIZE
PyString_FromFormat = _chimera.PyString_FromFormat
PyObject_GenericGetAttr = _chimera.PyObject_GenericGetAttr
PyBool_FromLong = _chimera.PyBool_FromLong
SWIG_Python_ErrorType = _chimera.SWIG_Python_ErrorType
SWIG_Python_AddErrorMsg = _chimera.SWIG_Python_AddErrorMsg
SWIG_PY_POINTER = _chimera.SWIG_PY_POINTER
SWIG_PY_BINARY = _chimera.SWIG_PY_BINARY
class swig_const_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_const_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_const_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _chimera.swig_const_info_type_set
    __swig_getmethods__["type"] = _chimera.swig_const_info_type_get
    if _newclass:type = _swig_property(_chimera.swig_const_info_type_get, _chimera.swig_const_info_type_set)
    __swig_setmethods__["name"] = _chimera.swig_const_info_name_set
    __swig_getmethods__["name"] = _chimera.swig_const_info_name_get
    if _newclass:name = _swig_property(_chimera.swig_const_info_name_get, _chimera.swig_const_info_name_set)
    __swig_setmethods__["lvalue"] = _chimera.swig_const_info_lvalue_set
    __swig_getmethods__["lvalue"] = _chimera.swig_const_info_lvalue_get
    if _newclass:lvalue = _swig_property(_chimera.swig_const_info_lvalue_get, _chimera.swig_const_info_lvalue_set)
    __swig_setmethods__["dvalue"] = _chimera.swig_const_info_dvalue_set
    __swig_getmethods__["dvalue"] = _chimera.swig_const_info_dvalue_get
    if _newclass:dvalue = _swig_property(_chimera.swig_const_info_dvalue_get, _chimera.swig_const_info_dvalue_set)
    __swig_setmethods__["pvalue"] = _chimera.swig_const_info_pvalue_set
    __swig_getmethods__["pvalue"] = _chimera.swig_const_info_pvalue_get
    if _newclass:pvalue = _swig_property(_chimera.swig_const_info_pvalue_get, _chimera.swig_const_info_pvalue_set)
    __swig_setmethods__["ptype"] = _chimera.swig_const_info_ptype_set
    __swig_getmethods__["ptype"] = _chimera.swig_const_info_ptype_get
    if _newclass:ptype = _swig_property(_chimera.swig_const_info_ptype_get, _chimera.swig_const_info_ptype_set)
    def __init__(self, *args): 
        this = _chimera.new_swig_const_info(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_swig_const_info
    __del__ = lambda self : None;
swig_const_info_swigregister = _chimera.swig_const_info_swigregister
swig_const_info_swigregister(swig_const_info)

SWIG_Python_SetErrorObj = _chimera.SWIG_Python_SetErrorObj
SWIG_Python_SetErrorMsg = _chimera.SWIG_Python_SetErrorMsg
SWIG_Python_SetConstant = _chimera.SWIG_Python_SetConstant
SWIG_Python_AppendOutput = _chimera.SWIG_Python_AppendOutput
SWIG_Python_UnpackTuple = _chimera.SWIG_Python_UnpackTuple
SWIG_POINTER_NOSHADOW = _chimera.SWIG_POINTER_NOSHADOW
SWIG_POINTER_NEW = _chimera.SWIG_POINTER_NEW
SWIG_POINTER_IMPLICIT_CONV = _chimera.SWIG_POINTER_IMPLICIT_CONV
SWIG_Py_Void = _chimera.SWIG_Py_Void
class PySwigClientData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigClientData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigClientData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["klass"] = _chimera.PySwigClientData_klass_set
    __swig_getmethods__["klass"] = _chimera.PySwigClientData_klass_get
    if _newclass:klass = _swig_property(_chimera.PySwigClientData_klass_get, _chimera.PySwigClientData_klass_set)
    __swig_setmethods__["newraw"] = _chimera.PySwigClientData_newraw_set
    __swig_getmethods__["newraw"] = _chimera.PySwigClientData_newraw_get
    if _newclass:newraw = _swig_property(_chimera.PySwigClientData_newraw_get, _chimera.PySwigClientData_newraw_set)
    __swig_setmethods__["newargs"] = _chimera.PySwigClientData_newargs_set
    __swig_getmethods__["newargs"] = _chimera.PySwigClientData_newargs_get
    if _newclass:newargs = _swig_property(_chimera.PySwigClientData_newargs_get, _chimera.PySwigClientData_newargs_set)
    __swig_setmethods__["destroy"] = _chimera.PySwigClientData_destroy_set
    __swig_getmethods__["destroy"] = _chimera.PySwigClientData_destroy_get
    if _newclass:destroy = _swig_property(_chimera.PySwigClientData_destroy_get, _chimera.PySwigClientData_destroy_set)
    __swig_setmethods__["delargs"] = _chimera.PySwigClientData_delargs_set
    __swig_getmethods__["delargs"] = _chimera.PySwigClientData_delargs_get
    if _newclass:delargs = _swig_property(_chimera.PySwigClientData_delargs_get, _chimera.PySwigClientData_delargs_set)
    __swig_setmethods__["implicitconv"] = _chimera.PySwigClientData_implicitconv_set
    __swig_getmethods__["implicitconv"] = _chimera.PySwigClientData_implicitconv_get
    if _newclass:implicitconv = _swig_property(_chimera.PySwigClientData_implicitconv_get, _chimera.PySwigClientData_implicitconv_set)
    def __init__(self, *args): 
        this = _chimera.new_PySwigClientData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_PySwigClientData
    __del__ = lambda self : None;
PySwigClientData_swigregister = _chimera.PySwigClientData_swigregister
PySwigClientData_swigregister(PySwigClientData)

SWIG_Python_CheckImplicit = _chimera.SWIG_Python_CheckImplicit
SWIG_Python_ExceptionType = _chimera.SWIG_Python_ExceptionType
PySwigClientData_New = _chimera.PySwigClientData_New
PySwigClientData_Del = _chimera.PySwigClientData_Del
class PySwigObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptr"] = _chimera.PySwigObject_ptr_set
    __swig_getmethods__["ptr"] = _chimera.PySwigObject_ptr_get
    if _newclass:ptr = _swig_property(_chimera.PySwigObject_ptr_get, _chimera.PySwigObject_ptr_set)
    __swig_setmethods__["ty"] = _chimera.PySwigObject_ty_set
    __swig_getmethods__["ty"] = _chimera.PySwigObject_ty_get
    if _newclass:ty = _swig_property(_chimera.PySwigObject_ty_get, _chimera.PySwigObject_ty_set)
    __swig_setmethods__["own"] = _chimera.PySwigObject_own_set
    __swig_getmethods__["own"] = _chimera.PySwigObject_own_get
    if _newclass:own = _swig_property(_chimera.PySwigObject_own_get, _chimera.PySwigObject_own_set)
    __swig_setmethods__["next"] = _chimera.PySwigObject_next_set
    __swig_getmethods__["next"] = _chimera.PySwigObject_next_get
    if _newclass:next = _swig_property(_chimera.PySwigObject_next_get, _chimera.PySwigObject_next_set)
    def __init__(self, *args): 
        this = _chimera.new_PySwigObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_PySwigObject
    __del__ = lambda self : None;
PySwigObject_swigregister = _chimera.PySwigObject_swigregister
PySwigObject_swigregister(PySwigObject)

PySwigObject_long = _chimera.PySwigObject_long
PySwigObject_format = _chimera.PySwigObject_format
PySwigObject_oct = _chimera.PySwigObject_oct
PySwigObject_hex = _chimera.PySwigObject_hex
PySwigObject_repr = _chimera.PySwigObject_repr
PySwigObject_print = _chimera.PySwigObject_print
PySwigObject_str = _chimera.PySwigObject_str
PySwigObject_compare = _chimera.PySwigObject_compare
_PySwigObject_type = _chimera._PySwigObject_type
PySwigObject_type = _chimera.PySwigObject_type
PySwigObject_Check = _chimera.PySwigObject_Check
PySwigObject_New = _chimera.PySwigObject_New
PySwigObject_dealloc = _chimera.PySwigObject_dealloc
PySwigObject_append = _chimera.PySwigObject_append
PySwigObject_next = _chimera.PySwigObject_next
PySwigObject_disown = _chimera.PySwigObject_disown
PySwigObject_acquire = _chimera.PySwigObject_acquire
PySwigObject_own = _chimera.PySwigObject_own
PySwigObject_getattr = _chimera.PySwigObject_getattr
class PySwigPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigPacked, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pack"] = _chimera.PySwigPacked_pack_set
    __swig_getmethods__["pack"] = _chimera.PySwigPacked_pack_get
    if _newclass:pack = _swig_property(_chimera.PySwigPacked_pack_get, _chimera.PySwigPacked_pack_set)
    __swig_setmethods__["ty"] = _chimera.PySwigPacked_ty_set
    __swig_getmethods__["ty"] = _chimera.PySwigPacked_ty_get
    if _newclass:ty = _swig_property(_chimera.PySwigPacked_ty_get, _chimera.PySwigPacked_ty_set)
    __swig_setmethods__["size"] = _chimera.PySwigPacked_size_set
    __swig_getmethods__["size"] = _chimera.PySwigPacked_size_get
    if _newclass:size = _swig_property(_chimera.PySwigPacked_size_get, _chimera.PySwigPacked_size_set)
    def __init__(self, *args): 
        this = _chimera.new_PySwigPacked(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_PySwigPacked
    __del__ = lambda self : None;
PySwigPacked_swigregister = _chimera.PySwigPacked_swigregister
PySwigPacked_swigregister(PySwigPacked)
cvar = _chimera.cvar

PySwigPacked_print = _chimera.PySwigPacked_print
PySwigPacked_repr = _chimera.PySwigPacked_repr
PySwigPacked_str = _chimera.PySwigPacked_str
PySwigPacked_compare = _chimera.PySwigPacked_compare
_PySwigPacked_type = _chimera._PySwigPacked_type
PySwigPacked_type = _chimera.PySwigPacked_type
PySwigPacked_Check = _chimera.PySwigPacked_Check
PySwigPacked_dealloc = _chimera.PySwigPacked_dealloc
PySwigPacked_New = _chimera.PySwigPacked_New
PySwigPacked_UnpackData = _chimera.PySwigPacked_UnpackData
_SWIG_This = _chimera._SWIG_This
SWIG_This = _chimera.SWIG_This
SWIG_Python_GetSwigThis = _chimera.SWIG_Python_GetSwigThis
SWIG_Python_AcquirePtr = _chimera.SWIG_Python_AcquirePtr
SWIG_Python_ConvertPtrAndOwn = _chimera.SWIG_Python_ConvertPtrAndOwn
SWIG_Python_ConvertFunctionPtr = _chimera.SWIG_Python_ConvertFunctionPtr
SWIG_Python_ConvertPacked = _chimera.SWIG_Python_ConvertPacked
SWIG_Python_NewShadowInstance = _chimera.SWIG_Python_NewShadowInstance
SWIG_Python_SetSwigThis = _chimera.SWIG_Python_SetSwigThis
SWIG_Python_InitShadowInstance = _chimera.SWIG_Python_InitShadowInstance
SWIG_Python_NewPointerObj = _chimera.SWIG_Python_NewPointerObj
SWIG_Python_NewPackedObj = _chimera.SWIG_Python_NewPackedObj
SWIG_Python_GetModule = _chimera.SWIG_Python_GetModule
PyModule_AddObject = _chimera.PyModule_AddObject
SWIG_Python_DestroyModule = _chimera.SWIG_Python_DestroyModule
SWIG_Python_SetModule = _chimera.SWIG_Python_SetModule
SWIG_Python_TypeCache = _chimera.SWIG_Python_TypeCache
SWIG_Python_TypeQuery = _chimera.SWIG_Python_TypeQuery
SWIG_POINTER_EXCEPTION = _chimera.SWIG_POINTER_EXCEPTION
SWIG_Python_AddErrMesg = _chimera.SWIG_Python_AddErrMesg
SWIG_Python_ArgFail = _chimera.SWIG_Python_ArgFail
PySwigObject_GetDesc = _chimera.PySwigObject_GetDesc
SWIG_Python_TypeError = _chimera.SWIG_Python_TypeError
SWIG_Python_MustGetPtr = _chimera.SWIG_Python_MustGetPtr
SWIG_TypeQuery = _chimera.SWIG_TypeQuery
SWIG_MangledTypeQuery = _chimera.SWIG_MangledTypeQuery
class ChimeraGlobal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChimeraGlobal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChimeraGlobal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["me"] = _chimera.ChimeraGlobal_me_set
    __swig_getmethods__["me"] = _chimera.ChimeraGlobal_me_get
    if _newclass:me = _swig_property(_chimera.ChimeraGlobal_me_get, _chimera.ChimeraGlobal_me_set)
    __swig_setmethods__["bootstrap"] = _chimera.ChimeraGlobal_bootstrap_set
    __swig_getmethods__["bootstrap"] = _chimera.ChimeraGlobal_bootstrap_get
    if _newclass:bootstrap = _swig_property(_chimera.ChimeraGlobal_bootstrap_get, _chimera.ChimeraGlobal_bootstrap_set)
    __swig_setmethods__["join"] = _chimera.ChimeraGlobal_join_set
    __swig_getmethods__["join"] = _chimera.ChimeraGlobal_join_get
    if _newclass:join = _swig_property(_chimera.ChimeraGlobal_join_get, _chimera.ChimeraGlobal_join_set)
    __swig_setmethods__["lock"] = _chimera.ChimeraGlobal_lock_set
    __swig_getmethods__["lock"] = _chimera.ChimeraGlobal_lock_get
    if _newclass:lock = _swig_property(_chimera.ChimeraGlobal_lock_get, _chimera.ChimeraGlobal_lock_set)
    __swig_setmethods__["forward"] = _chimera.ChimeraGlobal_forward_set
    __swig_getmethods__["forward"] = _chimera.ChimeraGlobal_forward_get
    if _newclass:forward = _swig_property(_chimera.ChimeraGlobal_forward_get, _chimera.ChimeraGlobal_forward_set)
    __swig_setmethods__["deliver"] = _chimera.ChimeraGlobal_deliver_set
    __swig_getmethods__["deliver"] = _chimera.ChimeraGlobal_deliver_get
    if _newclass:deliver = _swig_property(_chimera.ChimeraGlobal_deliver_get, _chimera.ChimeraGlobal_deliver_set)
    __swig_setmethods__["update"] = _chimera.ChimeraGlobal_update_set
    __swig_getmethods__["update"] = _chimera.ChimeraGlobal_update_get
    if _newclass:update = _swig_property(_chimera.ChimeraGlobal_update_get, _chimera.ChimeraGlobal_update_set)
    __swig_setmethods__["globalSeqNum"] = _chimera.ChimeraGlobal_globalSeqNum_set
    __swig_getmethods__["globalSeqNum"] = _chimera.ChimeraGlobal_globalSeqNum_get
    if _newclass:globalSeqNum = _swig_property(_chimera.ChimeraGlobal_globalSeqNum_get, _chimera.ChimeraGlobal_globalSeqNum_set)
    def __init__(self, *args): 
        this = _chimera.new_ChimeraGlobal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_ChimeraGlobal
    __del__ = lambda self : None;
ChimeraGlobal_swigregister = _chimera.ChimeraGlobal_swigregister
ChimeraGlobal_swigregister(ChimeraGlobal)

chimera_init = _chimera.chimera_init
chimera_join = _chimera.chimera_join
chimera_route = _chimera.chimera_route
chimera_forward = _chimera.chimera_forward
chimera_deliver = _chimera.chimera_deliver
chimera_update = _chimera.chimera_update
chimera_setkey = _chimera.chimera_setkey
chimera_register = _chimera.chimera_register
chimera_send = _chimera.chimera_send
chimera_ping = _chimera.chimera_ping
KEY_SIZE = _chimera.KEY_SIZE
BASE_B = _chimera.BASE_B
BASE_16_KEYLENGTH = _chimera.BASE_16_KEYLENGTH
BASE_2 = _chimera.BASE_2
BASE_4 = _chimera.BASE_4
BASE_16 = _chimera.BASE_16
class Key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Key, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _chimera.Key_t_set
    __swig_getmethods__["t"] = _chimera.Key_t_get
    if _newclass:t = _swig_property(_chimera.Key_t_get, _chimera.Key_t_set)
    __swig_setmethods__["keystr"] = _chimera.Key_keystr_set
    __swig_getmethods__["keystr"] = _chimera.Key_keystr_get
    if _newclass:keystr = _swig_property(_chimera.Key_keystr_get, _chimera.Key_keystr_set)
    __swig_setmethods__["valid"] = _chimera.Key_valid_set
    __swig_getmethods__["valid"] = _chimera.Key_valid_get
    if _newclass:valid = _swig_property(_chimera.Key_valid_get, _chimera.Key_valid_set)
    def __init__(self, *args): 
        this = _chimera.new_Key(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_Key
    __del__ = lambda self : None;
Key_swigregister = _chimera.Key_swigregister
Key_swigregister(Key)

key_makehash = _chimera.key_makehash
key_make_hash = _chimera.key_make_hash
key_init = _chimera.key_init
key_distance = _chimera.key_distance
key_between = _chimera.key_between
key_midpoint = _chimera.key_midpoint
key_index = _chimera.key_index
key_print = _chimera.key_print
key_to_str = _chimera.key_to_str
str_to_key = _chimera.str_to_key
get_key_string = _chimera.get_key_string
key_assign = _chimera.key_assign
key_assign_ui = _chimera.key_assign_ui
key_equal = _chimera.key_equal
key_equal_ui = _chimera.key_equal_ui
key_comp = _chimera.key_comp
LOGS = _chimera.LOGS
LOG_ERROR = _chimera.LOG_ERROR
LOG_WARN = _chimera.LOG_WARN
LOG_DEBUG = _chimera.LOG_DEBUG
LOG_KEYDEBUG = _chimera.LOG_KEYDEBUG
LOG_NETWORKDEBUG = _chimera.LOG_NETWORKDEBUG
LOG_ROUTING = _chimera.LOG_ROUTING
LOG_SECUREDEBUG = _chimera.LOG_SECUREDEBUG
LOG_DATA = _chimera.LOG_DATA
LOG_COUNT = _chimera.LOG_COUNT
log_init = _chimera.log_init
log_message = _chimera.log_message
log_direct = _chimera.log_direct
SUCCESS_WINDOW = _chimera.SUCCESS_WINDOW
GOOD_LINK = _chimera.GOOD_LINK
BAD_LINK = _chimera.BAD_LINK
class ChimeraHost(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChimeraHost, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChimeraHost, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _chimera.ChimeraHost_name_set
    __swig_getmethods__["name"] = _chimera.ChimeraHost_name_get
    if _newclass:name = _swig_property(_chimera.ChimeraHost_name_get, _chimera.ChimeraHost_name_set)
    __swig_setmethods__["address"] = _chimera.ChimeraHost_address_set
    __swig_getmethods__["address"] = _chimera.ChimeraHost_address_get
    if _newclass:address = _swig_property(_chimera.ChimeraHost_address_get, _chimera.ChimeraHost_address_set)
    __swig_setmethods__["failed"] = _chimera.ChimeraHost_failed_set
    __swig_getmethods__["failed"] = _chimera.ChimeraHost_failed_get
    if _newclass:failed = _swig_property(_chimera.ChimeraHost_failed_get, _chimera.ChimeraHost_failed_set)
    __swig_setmethods__["failuretime"] = _chimera.ChimeraHost_failuretime_set
    __swig_getmethods__["failuretime"] = _chimera.ChimeraHost_failuretime_get
    if _newclass:failuretime = _swig_property(_chimera.ChimeraHost_failuretime_get, _chimera.ChimeraHost_failuretime_set)
    __swig_setmethods__["port"] = _chimera.ChimeraHost_port_set
    __swig_getmethods__["port"] = _chimera.ChimeraHost_port_get
    if _newclass:port = _swig_property(_chimera.ChimeraHost_port_get, _chimera.ChimeraHost_port_set)
    __swig_setmethods__["latency"] = _chimera.ChimeraHost_latency_set
    __swig_getmethods__["latency"] = _chimera.ChimeraHost_latency_get
    if _newclass:latency = _swig_property(_chimera.ChimeraHost_latency_get, _chimera.ChimeraHost_latency_set)
    __swig_setmethods__["loss"] = _chimera.ChimeraHost_loss_set
    __swig_getmethods__["loss"] = _chimera.ChimeraHost_loss_get
    if _newclass:loss = _swig_property(_chimera.ChimeraHost_loss_get, _chimera.ChimeraHost_loss_set)
    __swig_setmethods__["success"] = _chimera.ChimeraHost_success_set
    __swig_getmethods__["success"] = _chimera.ChimeraHost_success_get
    if _newclass:success = _swig_property(_chimera.ChimeraHost_success_get, _chimera.ChimeraHost_success_set)
    __swig_setmethods__["success_win"] = _chimera.ChimeraHost_success_win_set
    __swig_getmethods__["success_win"] = _chimera.ChimeraHost_success_win_get
    if _newclass:success_win = _swig_property(_chimera.ChimeraHost_success_win_get, _chimera.ChimeraHost_success_win_set)
    __swig_setmethods__["success_win_index"] = _chimera.ChimeraHost_success_win_index_set
    __swig_getmethods__["success_win_index"] = _chimera.ChimeraHost_success_win_index_get
    if _newclass:success_win_index = _swig_property(_chimera.ChimeraHost_success_win_index_get, _chimera.ChimeraHost_success_win_index_set)
    __swig_setmethods__["success_avg"] = _chimera.ChimeraHost_success_avg_set
    __swig_getmethods__["success_avg"] = _chimera.ChimeraHost_success_avg_get
    if _newclass:success_avg = _swig_property(_chimera.ChimeraHost_success_avg_get, _chimera.ChimeraHost_success_avg_set)
    __swig_setmethods__["key"] = _chimera.ChimeraHost_key_set
    __swig_getmethods__["key"] = _chimera.ChimeraHost_key_get
    if _newclass:key = _swig_property(_chimera.ChimeraHost_key_get, _chimera.ChimeraHost_key_set)
    def __init__(self, *args): 
        this = _chimera.new_ChimeraHost(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_ChimeraHost
    __del__ = lambda self : None;
ChimeraHost_swigregister = _chimera.ChimeraHost_swigregister
ChimeraHost_swigregister(ChimeraHost)

class ChimeraState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChimeraState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChimeraState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["network"] = _chimera.ChimeraState_network_set
    __swig_getmethods__["network"] = _chimera.ChimeraState_network_get
    if _newclass:network = _swig_property(_chimera.ChimeraState_network_get, _chimera.ChimeraState_network_set)
    __swig_setmethods__["message"] = _chimera.ChimeraState_message_set
    __swig_getmethods__["message"] = _chimera.ChimeraState_message_get
    if _newclass:message = _swig_property(_chimera.ChimeraState_message_get, _chimera.ChimeraState_message_set)
    __swig_setmethods__["route"] = _chimera.ChimeraState_route_set
    __swig_getmethods__["route"] = _chimera.ChimeraState_route_get
    if _newclass:route = _swig_property(_chimera.ChimeraState_route_get, _chimera.ChimeraState_route_set)
    __swig_setmethods__["log"] = _chimera.ChimeraState_log_set
    __swig_getmethods__["log"] = _chimera.ChimeraState_log_get
    if _newclass:log = _swig_property(_chimera.ChimeraState_log_get, _chimera.ChimeraState_log_set)
    __swig_setmethods__["host"] = _chimera.ChimeraState_host_set
    __swig_getmethods__["host"] = _chimera.ChimeraState_host_get
    if _newclass:host = _swig_property(_chimera.ChimeraState_host_get, _chimera.ChimeraState_host_set)
    __swig_setmethods__["chimera"] = _chimera.ChimeraState_chimera_set
    __swig_getmethods__["chimera"] = _chimera.ChimeraState_chimera_get
    if _newclass:chimera = _swig_property(_chimera.ChimeraState_chimera_get, _chimera.ChimeraState_chimera_set)
    __swig_setmethods__["bootstrapMsgStore"] = _chimera.ChimeraState_bootstrapMsgStore_set
    __swig_getmethods__["bootstrapMsgStore"] = _chimera.ChimeraState_bootstrapMsgStore_get
    if _newclass:bootstrapMsgStore = _swig_property(_chimera.ChimeraState_bootstrapMsgStore_get, _chimera.ChimeraState_bootstrapMsgStore_set)
    __swig_setmethods__["bootstrapMutex"] = _chimera.ChimeraState_bootstrapMutex_set
    __swig_getmethods__["bootstrapMutex"] = _chimera.ChimeraState_bootstrapMutex_get
    if _newclass:bootstrapMutex = _swig_property(_chimera.ChimeraState_bootstrapMutex_get, _chimera.ChimeraState_bootstrapMutex_set)
    __swig_setmethods__["certificateStore"] = _chimera.ChimeraState_certificateStore_set
    __swig_getmethods__["certificateStore"] = _chimera.ChimeraState_certificateStore_get
    if _newclass:certificateStore = _swig_property(_chimera.ChimeraState_certificateStore_get, _chimera.ChimeraState_certificateStore_set)
    __swig_setmethods__["certificateMutex"] = _chimera.ChimeraState_certificateMutex_set
    __swig_getmethods__["certificateMutex"] = _chimera.ChimeraState_certificateMutex_get
    if _newclass:certificateMutex = _swig_property(_chimera.ChimeraState_certificateMutex_get, _chimera.ChimeraState_certificateMutex_set)
    def __init__(self, *args): 
        this = _chimera.new_ChimeraState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _chimera.delete_ChimeraState
    __del__ = lambda self : None;
ChimeraState_swigregister = _chimera.ChimeraState_swigregister
ChimeraState_swigregister(ChimeraState)

host_get = _chimera.host_get
host_release = _chimera.host_release
host_decode = _chimera.host_decode
host_encode = _chimera.host_encode
host_update_stat = _chimera.host_update_stat
host_init = _chimera.host_init


